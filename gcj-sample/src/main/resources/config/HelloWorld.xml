<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    

    <!-- context:component-scan base-package="dev.codebase.gcj.spring"/ -->

    <!-- Up until Spring 3.1 this was the way to go...now superceeded by PropertySourcesPlaceholderConfigurer -->
    <!-- bean id="helloWorldProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:properties/general.properties</value>
                <value>classpath:properties/helloWorld.properties</value>
                <value>classpath:properties/gcj.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />        
    </bean -->

    <!-- This is the short-form replacement, but only has configuarable location attribute
         which can be a list of file as shown...but can't set other flags that control
         handling of missing file, placeholder or how system properties should be handled -->
    <!-- context:property-placeholder location="classpath:properties/general.properties,
                                            classpath:properties/helloWorld.properties,
                                            classpath:properties/gcj.properties"/ -->

    <bean id="helloWorldProperties2" 
          class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:properties/general.properties</value>
                <value>classpath:properties/helloWorld.properties</value>
                <value>classpath:properties/gcj.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <!-- The property, localOverride, somehow replaces old functionality of systemPropertiesModeName -->
        <!-- Javadoc says: Sets whether local properties override properties from files. -->
        <!--               Default is "false": Properties from files override local defaults. -->
        
        <!-- ...which is odd because default for me takes system properties over file properties !! -->
        <!-- Very confusing as noted here: https://jira.spring.io/browse/SPR-10344 -->
        <!-- Much better explanation here: http://stackoverflow.com/questions/24977714/spring-propertysourcesplaceholderconfigurer-local-properties-vs-environment-one -->
        <!-- Basically, local properties are those are declared with the PropertySourcesPlaceholderConfigurer -->
        <!-- If you have a property in a location file that needs to override an environment property, -->
        <!-- then set the localOverride flag to true...by default, environment properties take precedence -->
        <property name="localOverride" value="true" />
    </bean>

    <!-- Required for activating the Spring annotations in class files -->
    <context:annotation-config/>
           
    <bean id="helloWorldGreeter" class="dev.codebase.gcj.spring.GreeterServiceImpl">
        <constructor-arg value="${message}"/>
    </bean>

    <bean id="helloWorldGreeter2" 
          class="dev.codebase.gcj.spring.GreeterServiceImpl2"/>

    <!-- If not using the annotation based autowiring on constructor, could use this instead -->
    <!-- 
        <bean id="helloWorldGreeter2" 
              class="dev.codebase.gcj.spring.GreeterServiceImpl2"
              autowire="constructor"/>
     -->
 
    <bean id="greetingMsg" class="java.lang.String">
        <constructor-arg value="Hello World 2...you've been autowired"/>
    </bean>
         
</beans>